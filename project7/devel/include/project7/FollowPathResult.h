// Generated by gencpp from file project7/FollowPathResult.msg
// DO NOT EDIT!


#ifndef PROJECT7_MESSAGE_FOLLOWPATHRESULT_H
#define PROJECT7_MESSAGE_FOLLOWPATHRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project7
{
template <class ContainerAllocator>
struct FollowPathResult_
{
  typedef FollowPathResult_<ContainerAllocator> Type;

  FollowPathResult_()
    : total_elapsed_time(0.0)  {
    }
  FollowPathResult_(const ContainerAllocator& _alloc)
    : total_elapsed_time(0.0)  {
  (void)_alloc;
    }



   typedef float _total_elapsed_time_type;
  _total_elapsed_time_type total_elapsed_time;





  typedef boost::shared_ptr< ::project7::FollowPathResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project7::FollowPathResult_<ContainerAllocator> const> ConstPtr;

}; // struct FollowPathResult_

typedef ::project7::FollowPathResult_<std::allocator<void> > FollowPathResult;

typedef boost::shared_ptr< ::project7::FollowPathResult > FollowPathResultPtr;
typedef boost::shared_ptr< ::project7::FollowPathResult const> FollowPathResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project7::FollowPathResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project7::FollowPathResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project7::FollowPathResult_<ContainerAllocator1> & lhs, const ::project7::FollowPathResult_<ContainerAllocator2> & rhs)
{
  return lhs.total_elapsed_time == rhs.total_elapsed_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project7::FollowPathResult_<ContainerAllocator1> & lhs, const ::project7::FollowPathResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project7

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::project7::FollowPathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project7::FollowPathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project7::FollowPathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project7::FollowPathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project7::FollowPathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project7::FollowPathResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project7::FollowPathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fdb763de4a769f0ddee5d990c7476141";
  }

  static const char* value(const ::project7::FollowPathResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfdb763de4a769f0dULL;
  static const uint64_t static_value2 = 0xdee5d990c7476141ULL;
};

template<class ContainerAllocator>
struct DataType< ::project7::FollowPathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project7/FollowPathResult";
  }

  static const char* value(const ::project7::FollowPathResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project7::FollowPathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"float32 total_elapsed_time\n"
;
  }

  static const char* value(const ::project7::FollowPathResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project7::FollowPathResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.total_elapsed_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowPathResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project7::FollowPathResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project7::FollowPathResult_<ContainerAllocator>& v)
  {
    s << indent << "total_elapsed_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_elapsed_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT7_MESSAGE_FOLLOWPATHRESULT_H
