// Generated by gencpp from file my_city/WeatherStatus.msg
// DO NOT EDIT!


#ifndef MY_CITY_MESSAGE_WEATHERSTATUS_H
#define MY_CITY_MESSAGE_WEATHERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_city
{
template <class ContainerAllocator>
struct WeatherStatus_
{
  typedef WeatherStatus_<ContainerAllocator> Type;

  WeatherStatus_()
    : condition()
    , temperature(0.0)  {
    }
  WeatherStatus_(const ContainerAllocator& _alloc)
    : condition(_alloc)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _condition_type;
  _condition_type condition;

   typedef double _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::my_city::WeatherStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_city::WeatherStatus_<ContainerAllocator> const> ConstPtr;

}; // struct WeatherStatus_

typedef ::my_city::WeatherStatus_<std::allocator<void> > WeatherStatus;

typedef boost::shared_ptr< ::my_city::WeatherStatus > WeatherStatusPtr;
typedef boost::shared_ptr< ::my_city::WeatherStatus const> WeatherStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_city::WeatherStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_city::WeatherStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_city::WeatherStatus_<ContainerAllocator1> & lhs, const ::my_city::WeatherStatus_<ContainerAllocator2> & rhs)
{
  return lhs.condition == rhs.condition &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_city::WeatherStatus_<ContainerAllocator1> & lhs, const ::my_city::WeatherStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_city

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_city::WeatherStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_city::WeatherStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_city::WeatherStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_city::WeatherStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_city::WeatherStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_city::WeatherStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_city::WeatherStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf6342d0402d73c156b8c72fd09b7f24";
  }

  static const char* value(const ::my_city::WeatherStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf6342d0402d73c1ULL;
  static const uint64_t static_value2 = 0x56b8c72fd09b7f24ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_city::WeatherStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_city/WeatherStatus";
  }

  static const char* value(const ::my_city::WeatherStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_city::WeatherStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string condition\n"
"float64 temperature\n"
;
  }

  static const char* value(const ::my_city::WeatherStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_city::WeatherStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.condition);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WeatherStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_city::WeatherStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_city::WeatherStatus_<ContainerAllocator>& v)
  {
    s << indent << "condition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.condition);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_CITY_MESSAGE_WEATHERSTATUS_H
